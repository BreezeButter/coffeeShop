(()=>{"use strict";const t=(...t)=>t.every((t=>"number"==typeof t&&!isNaN(t)));class e{constructor(){this.errorBox=document.getElementById("error")}hindError(){this.errorBox.classList.add("invisible")}showError(){this.errorBox.classList.remove("invisible")}showErrorMessage(e,r){const s=e.reduce(((e,s,n)=>(t(r[n])?e+="":e+=`${s} is not number.`,e)),"");this.errorBox.innerText=s,this.showError()}}class r{constructor(){this.priceInput=document.getElementById("product-price"),this.amountInput=document.getElementById("product-amount"),this.shippingInput=document.getElementById("product-shipping"),this.resultBox=document.getElementById("result"),this.totalBtn=document.getElementById("total-btn")}getInputs(){return[this.priceInput.value,this.amountInput.value,this.shippingInput.value]}setPrice(t){this.resultBox.innerText=t}onClick(t){this.totalBtn.addEventListener("click",t)}}(()=>{const s=new r,n=new e;n.hindError();s.onClick((()=>{n.hindError();const e=s.getInputs(),r=((...t)=>t.map((t=>+t)))(...e);if(t(...r)){const[t,e,n]=r,o=t*e+n;s.setPrice(o)}else n.showErrorMessage(e,r)}))})()})();